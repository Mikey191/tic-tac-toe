"""
1. Функция которая принимает массив и рисует поле.
2. Функция установки крестика или нолика
3. Функция проверки результата
4. Логика самой игры (ее можно поставить на первое место)
"""
#Функция которая принимает массив и рисует поле
def drawField(lst: list) -> None:
    # print("_"*12)
    for i in range(3):
        print(f"|{lst[0 + i*3]} | {lst[1 + i*3]} | {lst[2 + i*3]} |")
        # print("-"*12)

#Функция установки крестика или нолика
def setXO(player: str, lst: list) -> None:
    #Устанавливаем флаг, который измениться, когда крестик или нолик установится
    flag = False
    while not flag:
        #переменная с ответом пользователя
        answer = input(f"Введите номер клетки для установки {player}: ")
        try:
            answer = int(answer)
        except:
            print("Не правильный формат. Введите число от 1 до 9")
            #Пропускаем итерацию, так как нам нужно дождаться, пока пользователь введет корректное число
            continue
        #Теперь сделаем проверку на правильный диапозон числа (от 0 до 9), а так же на то что в клетки уже есть Х или О
        if 0 <= answer <= 9:
            if str(lst[answer - 1]) not in "XO":
                #устанавливаем Х или О в эту клетку
                lst[answer - 1] = player
                flag = True
            else:
                print("Клетка уже занята")
        else:
            print("Введите число от 1 до 9")

#Функция проверки результата
def checkResult(lst: list) -> str | bool:
    #список выигрышных комбинаций
    win_result = (
        #выигрышные комбинации по горизотали
        (0,1,2), (3,4,5), (6,7,8),
        #выигрышные комбинации по вертикали
        (0,3,6),(1,4,7),(2,5,8),
        #выигрышные комбинации по диагонали
        (0,4,8),(2,4,6)
    )
    #теперь надо пройтись по выигрышным комбинациям,
    # сравнить клетки между собой,
    # и если есть совпадения, то завершить игру
    for row in win_result:
        if lst[row[0]] == lst[row[1]] == lst[row[2]]:
            #Если есть совпадения, возвращаем символ выигрыша
            return lst[row[0]]
    #Только после полной проверки, возвращает Фалс. Если не нашли совпадений
    return False


if __name__ == "__main__":
    #Логика игры.
    #Начальное игровое поле
    field = list(range(1, 10))
    #флаг победы
    winFlag = False
    #счетчик, с помощью которого будем выбирать какой игрок ходит
    counter = 0
    #Два игрока
    player_one = "X"
    player_two = "O"
    print("ДОБРО ПОЖАЛОВАТЬ В ИГРУ КРЕСТИКИ НОЛИКИ")
    #Отображение начального поля
    # drawField(field)
    # Пока Функция проверки победы не вернет Тру, или в нашем случае Х или О, игра продолжается
    while not winFlag:
        drawField(field)
        #Устанавливаем в клетку либо Х либо О в зависимости от того, кто ходит
        if counter % 2 == 0:
            setXO(player_one, field)
        else:
            setXO(player_two, field)
        counter += 1
        #Проверка на победу после 3 ходов, так как 3 клетки уже могут быть выигрышной комбинацией
        if counter > 4:
            winFlag = checkResult(field)
            if winFlag:
                print(f"Поздравляем! Выиграл {winFlag}")
                break
        #Если победитель не выялен после 9 ходов, в игре ничья
        if counter == 9:
            print("Ничья. Победила дружба")
            break